left_join(get_rmse_table_covid(tvpcr_ada_lasso_lasso_res, column_name = "Adaptive LASSO TV-PCR")) |>
# left_join(get_rmse_table_covid(tvpcr_adalassoBIC_res, column_name = "Regularized TV-PCR (Adaptive LASSO with BIC)")) |>
left_join(get_rmse_table_covid(d2fm_res, column_name = "D2FM"))
## Print table
rmse_table_covid |>
pivot_longer(-Variable, names_to= "Specification", values_to = "RMSE") |>
pivot_wider(names_from = "Variable", values_from = "RMSE") |>
mutate(across(-Specification, ~cell_spec(.x, bold = if_else(as.numeric(str_sub(.x, 1, 6))==min(as.numeric(str_sub(.x, 1, 6))) & as.numeric(str_sub(.x, 1, 6)) < 1, TRUE, FALSE)))) |>
kable(format = "html",
caption = paste0("Relative RMSE for ",
horizon,
"-step forecasts. Benchmark model: PCR.
Size of the rolling window: ",
window_size, ". ",
ifelse(pseudo,
"Pseudo real-time evaluation.",
"Real-time evaluation."),
"\nSignificance levels of the Diebold-Mariano test:
'\\*\\*\\*' p < 0.001,
'\\*\\*' p < 0.01,
'\\*' p < 0.05,
'.' p < 0.1"),
digits = 4,
escape = FALSE) |>
kable_classic()
# Print tables for latex
## covid
rmse_table |>
mutate(across(where(is.character), str_trim)) |>
pivot_longer(-Variable, names_to= "Specification", values_to = "RMSE") |>
pivot_wider(names_from = "Variable", values_from = "RMSE") |>
mutate(across(-Specification, ~cell_spec(.x, format = "latex", bold = if_else(as.numeric(str_sub(.x, 1, 6))==min(as.numeric(str_sub(.x, 1, 6))) & as.numeric(str_sub(.x, 1, 6)) < 1, TRUE, FALSE)))) |>
kable(
format = "latex", booktabs = TRUE, table.envir = "subtable",
caption = paste0("Relative RMSE for ",
horizon,
"-step forecasts. Benchmark model: PCR.
Size of the rolling window: ",
window_size, ". ",
ifelse(pseudo,
"Pseudo real-time evaluation.",
"Real-time evaluation."),
" Significance levels refers to the one-sided Diebold-Mariano test of the superior forecasting ability over the benchmark."),
digits = 4,
escape = FALSE,
linesep = c('', '', '\\addlinespace', '', '', '', '\\addlinespace', '', '', '\\addlinespace', '', '', '', '\\addlinespace')) |>
footnote(general = "`***' $p < 0.001$,
`**' $p < 0.01$,
`*' $p < 0.05$,
`.' $p < 0.1$",
footnote_as_chunk = TRUE,
threeparttable = TRUE,
general_title = "Note:",
escape = FALSE) |>
kable_styling(latex_options="scale_down") #|>
# writeLines(paste0('../latex-thesis-BSE/tab_fullsample_horizon',horizon,'.tex'))
## pre-covid
rmse_table_covid |>
mutate(across(where(is.character), str_trim)) |>
pivot_longer(-Variable, names_to= "Specification", values_to = "RMSE") |>
pivot_wider(names_from = "Variable", values_from = "RMSE") |>
mutate(across(-Specification, ~cell_spec(.x, format = "latex", bold = if_else(as.numeric(str_sub(.x, 1, 6))==min(as.numeric(str_sub(.x, 1, 6))) & as.numeric(str_sub(.x, 1, 6)) < 1, TRUE, FALSE)))) |>
kable(
format = "latex", booktabs = TRUE, table.envir = "subtable",
caption = paste0("Relative RMSE for ",
horizon,
"-step forecasts. Benchmark model: PCR.
Size of the rolling window: ",
window_size, ". ",
ifelse(pseudo,
"Pseudo real-time evaluation.",
"Real-time evaluation."),
" Significance levels refers to the one-sided Diebold-Mariano test of the superior forecasting ability over the benchmark."),
digits = 4,
escape = FALSE,
linesep = c('', '', '\\addlinespace', '', '', '', '\\addlinespace', '', '', '\\addlinespace', '', '', '', '\\addlinespace')) |>
footnote(general = "`***' $p < 0.001$,
`**' $p < 0.01$,
`*' $p < 0.05$,
`.' $p < 0.1$",
footnote_as_chunk = TRUE,
threeparttable = TRUE,
general_title = "Note:",
escape = FALSE) |>
kable_styling(latex_options="scale_down")
models=list(pcr_res,diffusionmap_res,pcrquadratic_res,kernelgauss_res,tvpcr_lasso_res,tvpcr_ada_lasso_lasso_res)
model_names=c('pcr_res','diffusionmap_res','pcrquadratic_res','kernelgauss_res','tvpcr_lasso_res','tvpcr_ada_lasso_lasso_res')
target_v=c('INDPRO', 'UNRATE')
cumulative_error_plot(models, model_names, target_v)
coeff_lasso=readRDS('components/coeff_ada_pre_INDPRO_h3')
coeff_ada=readRDS('components/coeff_lasso_pre_INDPRO_h3')
library(ggplot2)
df <- data.frame(value_lasso = as.vector(coeff_lasso)[-1],
value_ada = as.vector(coeff_ada)[-1],
ind = seq_len(length(as.vector(coeff_ada)[-1])))
df <- tidyr::pivot_longer(df, -ind, names_to = "type", values_to = "value")
ggplot(df, aes(x = ind, y = value, fill = type)) +
geom_bar(stat = "identity" , width = 5, position = 'dodge') +
scale_fill_manual(values = c("value_ada" = "red", "value_lasso" = "blue")) +
theme_minimal() +
labs(title = "Lasso and Adaptive Lasso coefficients - Indpro horizon 3 (pre covid)", x = "Predictor Variables", y = "Coefficient Value")
###########
coeff_lasso=readRDS('components/coeff_ada_pre_INDPRO_h1')
coeff_ada=readRDS('components/coeff_lasso_pre_INDPRO_h1')
library(ggplot2)
df <- data.frame(value_lasso = as.vector(coeff_lasso)[-1],
value_ada = as.vector(coeff_ada)[-1],
ind = seq_len(length(as.vector(coeff_ada)[-1])))
df <- tidyr::pivot_longer(df, -ind, names_to = "type", values_to = "value")
ggplot(df, aes(x = ind, y = value, fill = type)) +
geom_bar(stat = "identity" , width = 5, position = 'dodge') +
scale_fill_manual(values = c("value_ada" = "red", "value_lasso" = "blue")) +
theme_minimal() +
labs(title = "Lasso and Adaptive Lasso coefficients - Indpro horizon 1 (pre covid)", x = "Predictor Variables", y = "Coefficient Value")
############
coeff_lasso=readRDS('components/coeff_ada_pre_INDPRO_h6')
coeff_ada=readRDS('components/coeff_lasso_pre_INDPRO_h6')
library(ggplot2)
df <- data.frame(value_lasso = as.vector(coeff_lasso)[-1],
value_ada = as.vector(coeff_ada)[-1],
ind = seq_len(length(as.vector(coeff_ada)[-1])))
df <- tidyr::pivot_longer(df, -ind, names_to = "type", values_to = "value")
ggplot(df, aes(x = ind, y = value, fill = type)) +
geom_bar(stat = "identity" , width = 5, position = 'dodge') +
scale_fill_manual(values = c("value_ada" = "red", "value_lasso" = "blue")) +
theme_minimal() +
labs(title = "Lasso and Adaptive Lasso coefficients - Indpro horizon 6 (pre covid)", x = "Predictor Variables", y = "Coefficient Value")
############
coeff_lasso=readRDS('components/coeff_ada_pre_INDPRO_h4')
coeff_ada=readRDS('components/coeff_lasso_pre_INDPRO_h4')
library(ggplot2)
df <- data.frame(value_lasso = as.vector(coeff_lasso)[-1],
value_ada = as.vector(coeff_ada)[-1],
ind = seq_len(length(as.vector(coeff_ada)[-1])))
df <- tidyr::pivot_longer(df, -ind, names_to = "type", values_to = "value")
ggplot(df, aes(x = ind, y = value, fill = type)) +
geom_bar(stat = "identity" , width = 5, position = 'dodge') +
scale_fill_manual(values = c("value_ada" = "red", "value_lasso" = "blue")) +
theme_minimal() +
labs(title = "Lasso and Adaptive Lasso coefficients - Indpro horizon 4 (pre covid)", x = "Predictor Variables", y = "Coefficient Value")
coeff_lasso=readRDS('components/coeff_lasso_W875RX1_coeff')
coeff_ada=readRDS('components/coeff_ada_W875RX1_coeff')
library(ggplot2)
df <- data.frame(value_lasso = as.vector(coeff_lasso)[-1],
value_ada = as.vector(coeff_ada)[-1],
ind = seq_len(length(as.vector(coeff_ada)[-1])))
df <- tidyr::pivot_longer(df, -ind, names_to = "type", values_to = "value")
ggplot(df, aes(x = ind, y = value, fill = type)) +
geom_bar(stat = "identity" , width = 5, position = 'dodge') +
scale_fill_manual(values = c("value_ada" = "red", "value_lasso" = "blue")) +
theme_minimal() +
labs(title = "Lasso and Adaptive Lasso coefficients - W875RX1 horizon 4 (before Covid)", x = "Predictor Variables", y = "Coefficient Value")
setup_name="_horizon1_windowsize672_pseudoTRUE"
horizon=1
ar1_res <- readRDS(paste0("results/ar1_benchmark", setup_name))
pcr_res <- readRDS(paste0("results/pcr_reg", setup_name))
diffusionmap_res <- readRDS(paste0("results/diffusion_map_reg", setup_name))
pcrquadratic_res <- readRDS(paste0("results/pcr_quadratic_reg", setup_name))
kernelquadratic_res <- readRDS(paste0("results/kernel_pcrpoly2", setup_name))
kernelgauss_res <- readRDS(paste0("results/kernel_pcrgaussian0.001", setup_name))
tvpcr50_res <- readRDS(paste0("results/tvpcr50", setup_name))
tvpcr100_res <- readRDS(paste0("results/tvpcr100", setup_name))
# tvpcr150_res <- readRDS(paste0("results/tvpcr150", setup_name))
# tvpcr200_res <- readRDS(paste0("results/tvpcr200", setup_name))
# tvpcr250_res <- readRDS(paste0("results/tvpcr250", setup_name))
tvpcr_lasso_res <- readRDS(paste0("results/tvpcr_lasso", setup_name))
# tvpcr_adalasso_res <- readRDS(paste0("results/tvpcr_adalasso", setup_name))
tvpcr_ada_lasso_lasso_res <- readRDS(paste0("results/tvpcr_ada_lasso_lasso_res", setup_name))
# tvpcr_adalassoBIC_res <- readRDS(paste0("results/tvpcr_adalassoBIC", setup_name))
tvpcr_ridge_res <- readRDS(paste0("results/tvpcr_ridge", setup_name))
# tvpcr_elasticnet_res <- readRDS(paste0("results/tvpcr_elasticnet", setup_name))
rtsne_res <- readRDS(paste0("results/rtsne_reg", setup_name))
lle_res <- readRDS(paste0("results/lle_reg", setup_name))
isomap_res <- readRDS(paste0("results/isomap_reg", setup_name))
d2fm_res <- readRDS(paste0("results/d2fm", setup_name))
dfm_res <- readRDS(paste0("results/dfm", setup_name))
forecasters_name <- c("ar1", "pcr", "diffusionmap","pcrquadratic",'kernelquadratic','kernelgauss','tvpcr50','tvpcr100','tvpcr_lasso','tvpcr_ada_lasso','tvpcr_ridge','rtsne','lle','isomap','d2fm','dfm')
# List to store 'forecast_errors' dataframes
all_forecasts <- list()
target_variables <- c("UNRATE","W875RX1","GS10","CPIAUCSL","WPSFD49207","PAYEMS","HOUST","INDPRO","M2SL","S.P.500")
all_forecasts[[1]] <- ar1_res$forecast_errors
all_forecasts[[2]] <- pcr_res$forecast_errors
all_forecasts[[3]] <- diffusionmap_res$forecast_errors
all_forecasts[[4]] <- pcrquadratic_res$forecast_errors
all_forecasts[[5]] <- kernelquadratic_res$forecast_errors
all_forecasts[[6]] <- kernelgauss_res$forecast_errors
all_forecasts[[7]] <- tvpcr50_res$forecast_errors
all_forecasts[[8]] <- tvpcr100_res$forecast_errors
all_forecasts[[9]] <- tvpcr_lasso_res$forecast_errors
all_forecasts[[10]] <- tvpcr_ada_lasso_lasso_res$forecast_errors
all_forecasts[[11]] <- tvpcr_ridge_res$forecast_errors
all_forecasts[[12]] <- rtsne_res$forecast_errors
all_forecasts[[13]] <- lle_res$forecast_errors
all_forecasts[[14]] <- isomap_res$forecast_errors
all_forecasts[[15]] <- d2fm_res$forecast_errors
all_forecasts[[16]] <- dfm_res$forecast_errors
d <- preprocess_fredmd(fredmd)[,-1]
d <- d[(672+horizon):769,]
d_scaled <- scale(d)
observedvariables <- d_scaled
observedvariables <- observedvariables[, !colnames(observedvariables) %in% target_variables]
num_forecasts <- length(all_forecasts)
# Number of observed variables
num_observed_variables <- ncol(observedvariables)
correlation_matrix <- matrix(nrow = num_observed_variables, ncol = num_forecasts * 10)
# Loop over all target variables in all_forecasts
for(i in 1:num_forecasts){
for(j in 1:10){
# Get target variable
target_variable <- all_forecasts[[i]][,j+1]
# Loop over all observed variables
for(k in 1:ncol(observedvariables)){
# Get observed variable
observed_variable <- observedvariables[,k]
# Compute correlation and store it in the matrix
correlation_matrix[k, (i-1)*10+j] <- abs(cor(target_variable, observed_variable))
}
}
}
#
# max_value <- max(correlation_matrix)
# max_row <- which.max(correlation_matrix[,152])
# max_col <- max.col(correlation_matrix) #152
# #W875RX1
# #W875RX1
# colnames(correlation_matrix)[151]
# correlation_matrix[2,152]
#
# dfm_res$forecast_errors$W875RX1
# dfm_res$ground_truth$W875RX1
# cor(dfm_res$forecast_errors$W875RX1,dfm_res$ground_truth$W875RX1)
# cor(tvpcr_lasso_res$forecast_errors$INDPRO,tvpcr_lasso_res$ground_truth$INDPRO)
# cor(tvpcr_lasso_res$forecast_errors$CPIAUCSL,tvpcr_lasso_res$ground_truth$CPIAUCSL)
# cor(tvpcr_lasso_res$forecast_errors$UNRATE,tvpcr_lasso_res$ground_truth$UNRATE)
colnames(correlation_matrix) <- rep(paste0(rep(forecasters_name, each = length(target_variables)), "_", rep(1:length(target_variables), length(forecasters_name))), length(target_variables))[1:ncol(correlation_matrix)]
rownames(correlation_matrix)=colnames(observedvariables)
#heatmap(correlation_matrix,Rowv = NA, Colv =NA,scale = "none")
library(reshape2)
library(hrbrthemes)
melted_cormat <- melt(correlation_matrix)
n_cols <- length(unique(melted_cormat$Var2))
# Create labels
x_labels <- rep("", n_cols)
x_labels[seq(5, n_cols, 10)[1:length(forecasters_name)]]<-forecasters_name
#<- unique(melted_cormat$Var2)[seq(1, n_cols, 10)]
# Create the plot
ggplot(data = melted_cormat, aes(x=Var2, y=Var1, fill=value)) +
geom_tile() +
scale_fill_gradient(low="white", high="steelblue")+
#scale_fill_gradient2(low = "white",mid='gold',midpoint = 0.5,high = "red4", guide = "colorbar")+
scale_x_discrete(labels = x_labels, breaks = unique(melted_cormat$Var2)) +
theme_ipsum() +
theme(axis.text.y = element_text(size = 5)) +
theme(axis.text.x = element_text(size = 7)) +
geom_vline(xintercept = seq(10.5, n_cols-1, 10), color = "black",size = 0.6)+
xlab("") +  # Empty x-axis label
ylab("")+
labs(title = "Horizon 6")
setup_name="_horizon3_windowsize672_pseudoTRUE"
horizon=3
ar1_res <- readRDS(paste0("results/ar1_benchmark", setup_name))
pcr_res <- readRDS(paste0("results/pcr_reg", setup_name))
diffusionmap_res <- readRDS(paste0("results/diffusion_map_reg", setup_name))
pcrquadratic_res <- readRDS(paste0("results/pcr_quadratic_reg", setup_name))
kernelquadratic_res <- readRDS(paste0("results/kernel_pcrpoly2", setup_name))
kernelgauss_res <- readRDS(paste0("results/kernel_pcrgaussian0.001", setup_name))
tvpcr50_res <- readRDS(paste0("results/tvpcr50", setup_name))
tvpcr100_res <- readRDS(paste0("results/tvpcr100", setup_name))
# tvpcr150_res <- readRDS(paste0("results/tvpcr150", setup_name))
# tvpcr200_res <- readRDS(paste0("results/tvpcr200", setup_name))
# tvpcr250_res <- readRDS(paste0("results/tvpcr250", setup_name))
tvpcr_lasso_res <- readRDS(paste0("results/tvpcr_lasso", setup_name))
# tvpcr_adalasso_res <- readRDS(paste0("results/tvpcr_adalasso", setup_name))
tvpcr_ada_lasso_lasso_res <- readRDS(paste0("results/tvpcr_ada_lasso_lasso_res", setup_name))
# tvpcr_adalassoBIC_res <- readRDS(paste0("results/tvpcr_adalassoBIC", setup_name))
tvpcr_ridge_res <- readRDS(paste0("results/tvpcr_ridge", setup_name))
# tvpcr_elasticnet_res <- readRDS(paste0("results/tvpcr_elasticnet", setup_name))
rtsne_res <- readRDS(paste0("results/rtsne_reg", setup_name))
lle_res <- readRDS(paste0("results/lle_reg", setup_name))
isomap_res <- readRDS(paste0("results/isomap_reg", setup_name))
d2fm_res <- readRDS(paste0("results/d2fm", setup_name))
dfm_res <- readRDS(paste0("results/dfm", setup_name))
forecasters_name <- c("ar1", "pcr", "diffusionmap","pcrquadratic",'kernelquadratic','kernelgauss','tvpcr50','tvpcr100','tvpcr_lasso','tvpcr_ada_lasso','tvpcr_ridge','rtsne','lle','isomap','d2fm','dfm')
# List to store 'forecast_errors' dataframes
all_forecasts <- list()
target_variables_all <- c("UNRATE","W875RX1","GS10","CPIAUCSL","WPSFD49207","PAYEMS","HOUST","INDPRO","M2SL","S.P.500")
#target_variables <- c("UNRATE", "CPIAUCSL", "INDPRO", "S.P.500")
target_variables <- c("UNRATE", "CPIAUCSL", "INDPRO")#,"S.P.500")
indexes <- match(target_variables, target_variables_all)
all_forecasts[[1]] <- ar1_res$forecast_errors
all_forecasts[[2]] <- pcr_res$forecast_errors
all_forecasts[[3]] <- diffusionmap_res$forecast_errors
all_forecasts[[4]] <- pcrquadratic_res$forecast_errors
all_forecasts[[5]] <- kernelquadratic_res$forecast_errors
all_forecasts[[6]] <- kernelgauss_res$forecast_errors
all_forecasts[[7]] <- tvpcr50_res$forecast_errors
all_forecasts[[8]] <- tvpcr100_res$forecast_errors
all_forecasts[[9]] <- tvpcr_lasso_res$forecast_errors
all_forecasts[[10]] <- tvpcr_ada_lasso_lasso_res$forecast_errors
all_forecasts[[11]] <- tvpcr_ridge_res$forecast_errors
all_forecasts[[12]] <- lle_res$forecast_errors
all_forecasts[[13]] <- lle_res$forecast_errors
all_forecasts[[14]] <- isomap_res$forecast_errors
all_forecasts[[15]] <- d2fm_res$forecast_errors
all_forecasts[[16]] <- dfm_res$forecast_errors
#### dates is "2015-01-01"-"2023-01-01" for horizon 1
d <- preprocess_fredmd(fredmd)[,-1]
d <- d[(672+horizon):769,]
d_scaled <- scale(d)
observedvariables <- d_scaled
num_forecasts <- length(all_forecasts)
# Number of observed variables
num_observed_variables <- ncol(observedvariables)
correlation_matrix <- matrix(nrow = num_observed_variables, ncol = num_forecasts * length(target_variables))
# Loop over all target variables in all_forecasts
for(i in 1:num_forecasts){
w=1
for(j in indexes){
# Get target variable
target_variable <- all_forecasts[[i]][,j+1]
# Loop over all observed variables
for(k in 1:ncol(observedvariables)){
# Get observed variable
observed_variable <- observedvariables[,k]
# Compute correlation and store it in the matrix
correlation_matrix[k, (i-1)*length(target_variables)+w] <- abs(cor(target_variable, observed_variable))
}
w=w+1
}
}
#colnames(correlation_matrix) <- rep(forecasters_name, each = 10)
colnames(correlation_matrix) <- rep(paste0(rep(forecasters_name, each = length(target_variables)), "_", rep(1:length(target_variables), length(forecasters_name))), length(target_variables))[1:ncol(correlation_matrix)]
rownames(correlation_matrix)=colnames(observedvariables)
#heatmap(correlation_matrix,Rowv = NA, Colv =NA,scale = "none")
library(reshape2)
library(hrbrthemes)
melted_cormat <- melt(correlation_matrix)
n_cols <- length(unique(melted_cormat$Var2))
# Create labels
x_labels <- rep("", n_cols)
x_labels[seq(2, n_cols, length(target_variables))[1:length(forecasters_name)]]<-forecasters_name
# Create the plot
ggplot(data = melted_cormat, aes(x=Var2, y=Var1, fill=value)) +
geom_tile() +
scale_fill_gradient(low="white", high="steelblue") +
scale_x_discrete(labels = x_labels, breaks = unique(melted_cormat$Var2)) +
theme_ipsum() +
theme(axis.text.y = element_text(size = 5)) +
theme(axis.text.x = element_text(size = 7)) +
geom_vline(xintercept = seq((length(target_variables)+0.5), n_cols-1, length(target_variables)), color = "black",size = 0.2)+
xlab("") +  # Empty x-axis label
ylab("")+
labs(title = "Horizon 3 - full sample")
setup_name="_horizon1_windowsize672_pseudoTRUE"
horizon=1
ar1_res <- readRDS(paste0("results/ar1_benchmark", setup_name))%>% get_covid_data()
pcr_res <- readRDS(paste0("results/pcr_reg", setup_name))%>% get_covid_data()
lasso <- readRDS(paste0("results/lasso", setup_name))%>% get_covid_data()
lasso_pcr <- readRDS(paste0("results/pcr_lasso", setup_name))%>% get_covid_data()
diffusionmap_res <- readRDS(paste0("results/diffusion_map_reg", setup_name))%>% get_covid_data()
pcrquadratic_res <- readRDS(paste0("results/pcr_quadratic_reg", setup_name))%>% get_covid_data()
kernelquadratic_res <- readRDS(paste0("results/kernel_pcrpoly2", setup_name))%>% get_covid_data()
kernelgauss_res <- readRDS(paste0("results/kernel_pcrgaussian0.001", setup_name))%>% get_covid_data()
tvpcr50_res <- readRDS(paste0("results/tvpcr50", setup_name))%>% get_covid_data()
tvpcr100_res <- readRDS(paste0("results/tvpcr100", setup_name))%>% get_covid_data()
# tvpcr150_res <- readRDS(paste0("results/tvpcr150", setup_name))
# tvpcr200_res <- readRDS(paste0("results/tvpcr200", setup_name))
# tvpcr250_res <- readRDS(paste0("results/tvpcr250", setup_name))
tvpcr_lasso_res <- readRDS(paste0("results/tvpcr_lasso", setup_name))%>% get_covid_data()
# tvpcr_adalasso_res <- readRDS(paste0("results/tvpcr_adalasso", setup_name))
tvpcr_ada_lasso_lasso_res <- readRDS(paste0("results/tvpcr_ada_lasso_lasso_res", setup_name))%>% get_covid_data()
# tvpcr_adalassoBIC_res <- readRDS(paste0("results/tvpcr_adalassoBIC", setup_name))
tvpcr_ridge_res <- readRDS(paste0("results/tvpcr_ridge", setup_name))%>% get_covid_data()
# tvpcr_elasticnet_res <- readRDS(paste0("results/tvpcr_elasticnet", setup_name))
rtsne_res <- readRDS(paste0("results/rtsne_reg", setup_name))%>% get_covid_data()
lle_res <- readRDS(paste0("results/lle_reg", setup_name))%>% get_covid_data()
isomap_res <- readRDS(paste0("results/isomap_reg", setup_name))%>% get_covid_data()
d2fm_res <- readRDS(paste0("results/d2fm", setup_name))%>% get_covid_data()
dfm_res <- readRDS(paste0("results/dfm", setup_name))%>% get_covid_data()
forecasters_name <- c("ar1", "pcr",'lasso','lasso_pcr', "diffusionmap","pcrquadratic",'kernelquadratic','kernelgauss','tvpcr50','tvpcr100','tvpcr_lasso','tvpcr_ada_lasso','tvpcr_ridge','rtsne','lle','isomap','d2fm','dfm')
# List to store 'forecast_errors' dataframes
all_forecasts <- list()
target_variables_all <- c("UNRATE","W875RX1","GS10","CPIAUCSL","WPSFD49207","PAYEMS","HOUST","INDPRO","M2SL","S.P.500")
#target_variables <- c("UNRATE", "CPIAUCSL", "INDPRO", "S.P.500")
#target_variables <- c("UNRATE", "CPIAUCSL", "INDPRO")
target_variables <- c("UNRATE","W875RX1","GS10","CPIAUCSL","WPSFD49207","PAYEMS","HOUST","INDPRO","M2SL","S.P.500")
indexes <- match(target_variables, target_variables_all)
all_forecasts[[1]] <- ar1_res$forecast_errors
all_forecasts[[2]] <- pcr_res$forecast_errors
all_forecasts[[3]] <-lasso$forecast_errors
all_forecasts[[4]] <-lasso_pcr$forecast_errors
all_forecasts[[5]] <- diffusionmap_res$forecast_errors
all_forecasts[[6]] <- pcrquadratic_res$forecast_errors
all_forecasts[[7]] <- kernelquadratic_res$forecast_errors
all_forecasts[[8]] <- kernelgauss_res$forecast_errors
all_forecasts[[9]] <- tvpcr50_res$forecast_errors
all_forecasts[[10]] <- tvpcr100_res$forecast_errors
all_forecasts[[11]] <- tvpcr_lasso_res$forecast_errors
all_forecasts[[12]] <- tvpcr_ada_lasso_lasso_res$forecast_errors
all_forecasts[[13]] <- tvpcr_ridge_res$forecast_errors
all_forecasts[[14]] <- lle_res$forecast_errors
all_forecasts[[15]] <- lle_res$forecast_errors
all_forecasts[[16]] <- isomap_res$forecast_errors
all_forecasts[[17]] <- d2fm_res$forecast_errors
all_forecasts[[18]] <- dfm_res$forecast_errors
fredmd_before_covid <- fredmd[1:733,]
d <- preprocess_fredmd(fredmd_before_covid)[,-1]
d <- d[(672+horizon):732,]
d_scaled <- scale(d)
observedvariables <- d_scaled
#observedvariables <- observedvariables[, !colnames(observedvariables) %in% target_variables]
num_forecasts <- length(all_forecasts)
# Number of observed variables
num_observed_variables <- ncol(observedvariables)
correlation_matrix <- matrix(nrow = num_observed_variables, ncol = num_forecasts * length(target_variables))
# Loop over all target variables in all_forecasts
for(i in 1:num_forecasts){
w=1
for(j in indexes){
# Get target variable
target_variable <- all_forecasts[[i]][,j+1]
# Loop over all observed variables
for(k in 1:ncol(observedvariables)){
# Get observed variable
observed_variable <- observedvariables[,k]
# Compute correlation and store it in the matrix
correlation_matrix[k, (i-1)*length(target_variables)+w] <- abs(cor(target_variable, observed_variable))
}
w=w+1
}
}
#colnames(correlation_matrix) <- rep(forecasters_name, each = 10)
colnames(correlation_matrix) <- rep(paste0(rep(forecasters_name, each = length(target_variables)), "_", rep(1:length(target_variables), length(forecasters_name))), length(target_variables))[1:ncol(correlation_matrix)]
rownames(correlation_matrix)=colnames(observedvariables)
#heatmap(correlation_matrix,Rowv = NA, Colv =NA,scale = "none")
library(reshape2)
library(hrbrthemes)
melted_cormat <- melt(correlation_matrix)
n_cols <- length(unique(melted_cormat$Var2))
# Create labels
x_labels <- rep("", n_cols)
x_labels[seq(5, n_cols, length(target_variables))[1:length(forecasters_name)]]<-forecasters_name
# Create the plot
ggplot(data = melted_cormat, aes(x=Var2, y=Var1, fill=value)) +
geom_tile() +
scale_fill_gradient(low="white", high="steelblue") +
scale_x_discrete(labels = x_labels, breaks = unique(melted_cormat$Var2)) +
theme_ipsum() +
theme(axis.text.y = element_text(size = 5)) +
theme(axis.text.x = element_text(size = 7)) +
geom_vline(xintercept = seq((length(target_variables)+0.5), n_cols-1, length(target_variables)), color = "black",size = 0.5)+
xlab("") +  # Empty x-axis label
ylab("")+
labs(title = "Horizon 3 - pre Covid")
diag(as.matrix(cor(ar1_res$forecast_errors[-1],ar1_res$ground_truth[-1]
)))
diag(as.matrix(cor(tvpcr_lasso_res$forecast_errors[-1],tvpcr_lasso_res$ground_truth[-1]
)))
diag(as.matrix(cor(pcr_res$forecast_errors[-1],pcr_res$ground_truth[-1]
)))
library(ggplot2)
# Sample data
vector1 <- pcr_res$forecasts$CPIAUCSL[-1]
vector2 <- pcr_res$ground_truth$CPIAUCSL[-1]
x <- 1:length(vector1)
# Create a data frame
data <- data.frame(x = x, vector1 = vector1, vector2 = vector2)
# Plotting
ggplot(data, aes(x = x)) +
geom_line(aes(y = vector1, color = "Forecast")) +
geom_line(aes(y = vector2, color = "Ground truth")) +
labs(x = "Index", y = "Values", title = "pcr_res - CPIAUCSL  ") +
scale_color_manual(values = c("Forecast" = "red", "Ground truth" = "blue")) +
theme_minimal() +
theme(legend.position = "top")
library(tidyverse)
library(lubridate)
library(gridExtra)
library(kableExtra)
## Load code from script folders
preprocessing_scripts_env <- new.env()
file.sources = list.files(paste0(getwd(), "/sourcecode"),
pattern=".R$", full.names=TRUE,
ignore.case=TRUE, recursive = TRUE)
sapply(file.sources, source, preprocessing_scripts_env)
attach(preprocessing_scripts_env, name="sourced_scripts")
## Load data
fredmd <- read.csv("data/current.csv")
target_variables <- c("UNRATE", "W875RX1", "GS10", "CPIAUCSL", "WPSFD49207", "PAYEMS", "HOUST", "INDPRO", "M2SL", "S.P.500")
# fredmd$sasdate[c(1+1, 649, 650, 770)]
# window_size = 648
fredmd$sasdate[c(1+1, 673, 674, 770)]
window_size = 672
##
## get sample data
d_list <- get_data_list(fredmd, 672)
d <- d_list[[1]][,-1] |> as.matrix()
## BUG LIST
#rtsne_reg
rtsne_reg(d, "INDPRO", horizon = 1)
rtsne_reg(d, "INDPRO", horizon = 3)
#lle_reg
lle_reg(d, "INDPRO", horizon = 1,n_components=4)
lle_reg(d, "INDPRO", horizon = 3,n_components=4)
#isomap
isomap_reg(d, "INDPRO", horizon = 1)
isomap_reg(d, "INDPRO", horizon = 3)
## List of forecasters
diffusion_map_reg(d, "INDPRO", horizon = 1)
pcr_quadratic_reg(d, "INDPRO", horizon = 1)
kernel_pcr(d, "INDPRO", horizon = 1, kernel = "poly")
kernel_pcr(d, "INDPRO", horizon = 1, kernel = "gaussian")
